<?php

namespace App\Models\Admin;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\File;

class EnvironmentVariable extends Model
{
    protected $fillable = [
        'key', 'value', 'group', 'description', 'is_encrypted', 'is_sensitive', 'requires_restart'
    ];

    protected $casts = [
        'is_encrypted' => 'boolean',
        'is_sensitive' => 'boolean',
        'requires_restart' => 'boolean'
    ];

    public function scopeByGroup($query, string $group)
    {
        return $query->where('group', $group);
    }

    public function scopeSensitive($query)
    {
        return $query->where('is_sensitive', true);
    }

    public function scopeNonSensitive($query)
    {
        return $query->where('is_sensitive', false);
    }

    public function getDisplayValue(): string
    {
        if ($this->is_sensitive) {
            return '***********';
        }

        return $this->value ?? '';
    }

    public function getRealValue(): string
    {
        $value = $this->value;

        if ($this->is_encrypted && $value) {
            $value = decrypt($value);
        }

        return $value ?? '';
    }

    public function setRealValue(string $value): void
    {
        if ($this->is_encrypted) {
            $value = encrypt($value);
        }

        $this->value = $value;
        $this->save();
    }

    public static function syncFromEnvFile(): array
    {
        $envPath = base_path('.env');
        $results = ['synced' => 0, 'skipped' => 0, 'errors' => []];

        if (!File::exists($envPath)) {
            $results['errors'][] = '.env file not found';
            return $results;
        }

        $envContent = File::get($envPath);
        $lines = explode("\n", $envContent);

        foreach ($lines as $line) {
            $line = trim($line);
            
            if (empty($line) || str_starts_with($line, '#')) {
                continue;
            }

            if (str_contains($line, '=')) {
                [$key, $value] = explode('=', $line, 2);
                $key = trim($key);
                $value = trim($value, '"\'');

                try {
                    $existing = self::where('key', $key)->first();
                    
                    if ($existing) {
                        $existing->setRealValue($value);
                        $results['synced']++;
                    } else {
                        self::create([
                            'key' => $key,
                            'value' => $value,
                            'group' => self::guessGroup($key),
                            'is_sensitive' => self::isSensitiveKey($key),
                            'requires_restart' => self::requiresRestart($key)
                        ]);
                        $results['synced']++;
                    }
                } catch (\Exception $e) {
                    $results['errors'][] = "Failed to sync {$key}: " . $e->getMessage();
                }
            }
        }

        return $results;
    }

    public static function writeToEnvFile(): bool
    {
        $envPath = base_path('.env');
        $variables = self::orderBy('group')->orderBy('key')->get();

        $content = "# Generated by Admin Dashboard\n";
        $content .= "# Last updated: " . now()->toDateTimeString() . "\n\n";

        $currentGroup = null;
        foreach ($variables as $variable) {
            if ($variable->group !== $currentGroup) {
                $content .= "\n# " . ucfirst($variable->group) . " Configuration\n";
                $currentGroup = $variable->group;
            }

            $value = $variable->getRealValue();
            
            // Quote values that contain spaces or special characters
            if (str_contains($value, ' ') || str_contains($value, '#')) {
                $value = '"' . $value . '"';
            }

            $content .= "{$variable->key}={$value}\n";
        }

        return File::put($envPath, $content) !== false;
    }

    private static function guessGroup(string $key): string
    {
        $groups = [
            'app' => ['APP_', 'DEBUG', 'LOG_'],
            'database' => ['DB_', 'DATABASE_'],
            'cache' => ['CACHE_', 'REDIS_'],
            'mail' => ['MAIL_', 'MAILGUN_', 'POSTMARK_', 'SES_'],
            'queue' => ['QUEUE_', 'BROADCAST_'],
            'auth' => ['AUTH_', 'JWT_', 'SANCTUM_'],
            'payment' => ['STRIPE_', 'PAYPAL_', 'RAZORPAY_'],
            'storage' => ['FILESYSTEM_', 'AWS_', 'MINIO_'],
            'api' => ['API_', 'OPENAI_', 'GOOGLE_']
        ];

        foreach ($groups as $group => $prefixes) {
            foreach ($prefixes as $prefix) {
                if (str_starts_with($key, $prefix)) {
                    return $group;
                }
            }
        }

        return 'general';
    }

    private static function isSensitiveKey(string $key): bool
    {
        $sensitiveKeywords = [
            'PASSWORD', 'SECRET', 'KEY', 'TOKEN', 'API_KEY', 'PRIVATE',
            'CLIENT_SECRET', 'WEBHOOK_SECRET', 'ENCRYPTION_KEY'
        ];

        foreach ($sensitiveKeywords as $keyword) {
            if (str_contains($key, $keyword)) {
                return true;
            }
        }

        return false;
    }

    private static function requiresRestart(string $key): bool
    {
        $restartKeys = [
            'APP_ENV', 'APP_DEBUG', 'APP_KEY', 'DB_', 'CACHE_DRIVER',
            'QUEUE_CONNECTION', 'BROADCAST_DRIVER', 'LOG_CHANNEL'
        ];

        foreach ($restartKeys as $restartKey) {
            if (str_starts_with($key, $restartKey)) {
                return true;
            }
        }

        return false;
    }

    public static function getGroups(): array
    {
        return [
            'app' => 'Application',
            'database' => 'Database',
            'cache' => 'Cache & Redis',
            'mail' => 'Mail & Notifications',
            'queue' => 'Queue & Broadcasting',
            'auth' => 'Authentication',
            'payment' => 'Payment Gateways',
            'storage' => 'File Storage',
            'api' => 'API Integrations',
            'general' => 'General'
        ];
    }
}